library(roxygen2); # Read in the roxygen2 R package
roxygenise();      # Builds the help files
getwd()
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
?lunar_to_gregorian
conversion_table <- read.csv("~/Anthro/Courses/ANTHRO_451_R_intro/student_data/jocelyn/lun2greg/lunar_gregorian.csv")
usethis::use_data(conversion_table, internal = TRUE)
getwd()
roxygenise()
rm(conversion_table)
roxygenise()
load_all(".")
?lunar_to_gregorian
lunar_to_gregorian("1888-12-24")
lunar_to_gregorian("1966-03L-12")
library(tidyverse)
library(roxygen2)
roxygenise()
warnings()
roxygenise()
library(tidyselect)
library(devtools)
getwd()
load_all(".")
library(tidyverse)
load_all(".")
loadedNamespaces()
library(devtools)
library(roxygen2)
library(devtools)
install.packages("testthat")
library(devtools)
library(roxygen2)
load_all(".")
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
library(devtools)
load_all(".")
lunar_to_gregorian("1888-12-24")
lunar_to_gregorian("1966-03L-12")
ledgers=read.csv("~/Anthro/Courses/ANTHRO_451_R_intro/student_data/jocelyn/Ledger_only.csv", fileEncoding = "UTF8")
ledgers$Date_Eng[1:10]
as.Date(ledgers$Date_Eng[1:10])
ymd(ledgers$Date_Eng[1:10])
mdy(ledgers$Date_Eng[1:10])
?mdy
library(lubridate)
mdy(ledgers$Date_Eng[1:10])
ledgers[1:10, ]
library(tidyverse)
ledgers[1:10, ] %>% mutate(tt = lunar_to_gregorian(mdy(Date_Eng))
ledgers[1:10, ] %>% mutate(tt = lunar_to_gregorian(mdy(Date_Eng)))
ledgers[1:10, ] %>% mutate(tt = lunar_to_gregorian(as.character(mdy(Date_Eng))))
ledgers[1:10, ] %>% mutate(tt = Vectorize(lunar_to_gregorian, as.character(mdy(Date_Eng))))
l2g_vec <- Vectorize(lunar_to_gregorian)
ledgers[1:10, ] %>% mutate(tt = l2g_vec(as.character(mdy(Date_Eng))))
ledgers %>% slice_head(10) %>% mutate(tt = l2g_vec(as.character(mdy(Date_Eng))))
ledgers %>% slice_head(10) %>% mutate(tt = lunar_to_gregorian(as.character(mdy(Date_Eng))))
ledgers %>% slice_head(10)
ledgers %>% slice_head(n = 10)
ledgers %>% slice_head(n = 10) %>% mutate(tt = lunar_to_gregorian(as.character(mdy(Date_Eng))))
as.character(mdy(ledgers$Date_Eng[1:10]))
dd <- as.character(mdy(ledgers$Date_Eng[1:10]))
class(dd)
lunar_to_gregorian(dd)
purr::map_df(dd, lunar_to_gregorian())
purrr::map_df(dd, lunar_to_gregorian())
ledgers %>% slice_head(n = 10) %>% map(lu)
ledgers %>% slice_head(n = 10) %>% mutate(tt = as.character(mdy(Date_Eng))) %>% map(lunar_to_gregorian, tt)
ledgers %>% slice_head(n = 10) %>% mutate(tt = as.character(mdy(Date_Eng))) %>% map(tt, lunar_to_gregorian)
ledgers %>% slice_head(n = 10) %>% mutate(tt = as.character(mdy(Date_Eng)),)
mtcars %>% map_dbl(sum)
mtcars %>% map_dbl(mpg, sum)
ledgers %>% slice_head(n = 10) %>% mutate(tt = as.character(mdy(Date_Eng)),
ll = map(tt, lunar_to_gregorian))
ledgers %>% slice_head(n = 10) %>% mutate(tt = as.character(mdy(Date_Eng)),
ll = map_chr(tt, lunar_to_gregorian))
dd
for(d in dd) { print(lunar_to_gregorian(d))}
View(ledgers)
ledgers %>% slice_head(n = 10) %>% mutate(tt = as.character(mdy(Date_Eng)),
ll = mapply(function(x)lunar_to_gregorian(x), tt))
mapply(function(x)lunar_to_gregorian(x), dd)
ddd <- as.character(mdy(ledgers$Date_Eng[221:231]))
ddd
mapply(function(x)lunar_to_gregorian(x), ddd)
load_all(".")
mapply(function(x)lunar_to_gregorian(x), ddd)
load_all(".")
mapply(function(x)lunar_to_gregorian(x), ddd)
ledgers %>% slice_head(n = 10) %>% mutate(tt = as.character(mdy(Date_Eng)),
ll = mapply(function(x)lunar_to_gregorian(x), tt))
ll <- c("1888-12-24", "1966-03L-12")
lunar_to_gregorian(ll)
str_detect(ll, "^\\d{4}-\\d{2}L?-\\d{2}$")
!str_detect(ll, "^\\d{4}-\\d{2}L?-\\d{2}$")
any(str_detect(ll, "^\\d{4}-\\d{2}L?-\\d{2}$"))
!any(str_detect(ll, "^\\d{4}-\\d{2}L?-\\d{2}$"))
lunar_to_gregorian(ll)
load_all()
lunar_to_gregorian(ll)
str_split(ll, "-")[[1]][1]
str_split(ll, "-")
str_split_fixed(ll, "-", 1)
str_split_fixed(ll, "-", 3)
str_split_fixed(ll, "-", 3)[,1]
str_split_fixed(ll, "-", 3)[,2]
mm <- str_split_fixed(ll, "-", 3)[,2]
str_ends(mm, "L")
as.numeric(str_sub(mm, 1, 2))
load_all()
lunar_to_gregorian(ll)
dy
dd
d <- as.numeric(str_split_fixed(ll, "-", 3)[,3])
d
mm
m <- as.numeric(str_sub(mm, 1, 2))
m
m > 12 | m < 1
d > max_days[m]
conv_tab <- read.csv("/Users/cengel/Anthro/Courses/ANTHRO_451_R_intro/student_data/jocelyn/lun2greg/lunar_gregorian.csv")
calendar <- filter(conv_tab, year == yr)
months_only <- select(calendar, first_day_month1:first_day_month12)
calendar <- filter(conv_tab, year == y)
months_only <- select(calendar, first_day_month1:first_day_month12)
y <- str_split_fixed(lunar_date, "-", 3)[,1]
y <- str_split_fixed(ll, "-", 3)[,1]
y
filter(conv_tab, year == y)
filter(conv_tab, year %in% y)
cal <- filter(conv_tab, year %in% y)
calendar <- calendar
calendar <- cal
rm(cal)
months_only <- select(calendar, first_day_month1:first_day_month12)
months_only
calendar$leap_month > 0
which(dy > 30 | dy < 1)
which(d > 30 | d < 1)
which(d > 20 | d < 1)
c(diff(unlist(months_only)),
calendar$days_in_year + calendar$first_day_month1 - calendar$first_day_month12)
unlist(months_only)
ymd(paste0(y, "-01-01"))
gy <- ymd(paste0(y, "-01-01"))
calendar %>%
select(ends_with(paste0("month", m))) %>%
as.numeric()
calendar %>%
select(ends_with(paste0("month", m)))
calendar %>%
select(ends_with(paste0("month", m[1])))
calendar %>%
select(ends_with(paste0("month", m[1]))) %>% as.numeric()
calendar %>%
select(ends_with(paste0("month", m[1,1]))) %>% as.numeric()
calendar %>%
select(ends_with(paste0("month", 12))) %>% as.numeric()
calendar %>%
select(ends_with(paste0("month", 12)))
1:10 %>%
map(rnorm, n = 10)
1:10 %>%
map(rnorm)
1:10 %>%
map(rnorm, n = 3)
c(y, m, d)
tibble(yr = y, mon = m, dy=d)
t <- tibble(yr = y, mon = m, dy=d)
fdom <- function(yr, mo, dy){
## BEGIN MAKE CALENDAR
# extract the row for year and all months
#calendar <- filter(conversion_table, year == yr)
calendar <- filter(conv_tab, year == yr)
months_only <- select(calendar, first_day_month1:first_day_month12)
# check if year has a leap month and if so, insert into the sequence
if (calendar$leap_month > 0) {
# insert leap month by extracting all months and sorting (by number of first days)
months_only <- calendar %>%
select(-c(year, leap_month, days_in_year)) %>%
sort()
# rename and insert leap month name
names(months_only) <- paste0("first_day_month", c(1:calendar$leap_month, paste0(calendar$leap_month,"L"), (calendar$leap_month+1):12))
# add other values back in
calendar <- bind_cols(year = calendar$year,
months_only,
leap_month = calendar$leap_month,
days_in_year = calendar$days_in_year)
}
# more error checks:
# how many days in a month for a particular year. e.g. is there a Feb 30th or not?
# (calculate days for last month: days in year + first day month1  - first day month12)
max_days <- c(diff(unlist(months_only)),
calendar$days_in_year + calendar$first_day_month1 - calendar$first_day_month12)
if(dy > max_days[mo]){
stop(paste(month.name[mo], yr, "has only", max_days[mo], "days in lunar calendar"))
}
# does the year in fact have the leap month as requested in the query?
m <- paste0("first_day_month", mo, "L")
if(leap_month_flag & !(m %in% names(months_only))){
stop(paste("no leap month", mo_l, "in", yr))
}
# extract the fist day of the month from lunar
first_day_of_month <-
calendar %>%
select(ends_with(paste0("month", mo))) %>%
as.numeric()
return(first_day_of_month)
}
pmap_dbl(t, fdom)
t
tibble(yr = y, mo = m, dy=d)
t <- tibble(yr = y, mo = m, dy=d)
pmap_dbl(t, fdom)
mm
leap_month_flag <- str_ends(mo_l, "L")
leap_month_flag <- str_ends(mm, "L")
leap_month_flag
fdom <- function(yr, mo_l, dy, leap_month_flag){
## BEGIN MAKE CALENDAR
# extract the row for year and all months
calendar <- filter(conversion_table, year == yr)
months_only <- select(calendar, first_day_month1:first_day_month12)
# check if year has a leap month and if so, insert into the sequence
if (calendar$leap_month > 0) {
# insert leap month by extracting all months and sorting (by number of first days)
months_only <- calendar %>%
select(-c(year, leap_month, days_in_year)) %>%
sort()
# rename and insert leap month name
names(months_only) <- paste0("first_day_month", c(1:calendar$leap_month, paste0(calendar$leap_month,"L"), (calendar$leap_month+1):12))
# add other values back in
calendar <- bind_cols(year = calendar$year,
months_only,
leap_month = calendar$leap_month,
days_in_year = calendar$days_in_year)
}
# more error checks:
# how many days in a month for a particular year. e.g. is there a Feb 30th or not?
# (calculate days for last month: days in year + first day month1  - first day month12)
max_days <- c(diff(unlist(months_only)),
calendar$days_in_year + calendar$first_day_month1 - calendar$first_day_month12)
if(dy > max_days[mo]){
stop(paste(month.name[mo], yr, "has only", max_days[mo], "days in lunar calendar"))
}
# does the year in fact have the leap month as requested in the query?
m <- paste0("first_day_month", mo, "L")
if(leap_month_flag & !(m %in% names(months_only))){
stop(paste("no leap month", mo_l, "in", yr))
}
# extract the fist day of the month from lunar
first_day_of_month <-
calendar %>%
select(ends_with(paste0("month", mo))) %>%
as.numeric()
return(first_day_of_month)
}
t <- tibble(yr = y, mo = m, dy=d, leap_month_flag=leap_month_flag)
pmap_dbl(t, fdom)
fdom <- function(yr, mo, dy, leap_month_flag){
## BEGIN MAKE CALENDAR
# extract the row for year and all months
calendar <- filter(conversion_table, year == yr)
months_only <- select(calendar, first_day_month1:first_day_month12)
# check if year has a leap month and if so, insert into the sequence
if (calendar$leap_month > 0) {
# insert leap month by extracting all months and sorting (by number of first days)
months_only <- calendar %>%
select(-c(year, leap_month, days_in_year)) %>%
sort()
# rename and insert leap month name
names(months_only) <- paste0("first_day_month", c(1:calendar$leap_month, paste0(calendar$leap_month,"L"), (calendar$leap_month+1):12))
# add other values back in
calendar <- bind_cols(year = calendar$year,
months_only,
leap_month = calendar$leap_month,
days_in_year = calendar$days_in_year)
}
# more error checks:
# how many days in a month for a particular year. e.g. is there a Feb 30th or not?
# (calculate days for last month: days in year + first day month1  - first day month12)
max_days <- c(diff(unlist(months_only)),
calendar$days_in_year + calendar$first_day_month1 - calendar$first_day_month12)
if(dy > max_days[mo]){
stop(paste(month.name[mo], yr, "has only", max_days[mo], "days in lunar calendar"))
}
# does the year in fact have the leap month as requested in the query?
m <- paste0("first_day_month", mo, "L")
if(leap_month_flag & !(m %in% names(months_only))){
stop(paste("no leap month", mo_l, "in", yr))
}
# extract the fist day of the month from lunar
first_day_of_month <-
calendar %>%
select(ends_with(paste0("month", mo))) %>%
as.numeric()
return(first_day_of_month)
}
pmap_dbl(t, fdom)
library(roxygen2)
roxygenise()
load_all()
ll
lunar_to_gregorian(ll)
load_all()
lunar_to_gregorian(ll)
ledgers=read.csv("~/Anthro/Courses/ANTHRO_451_R_intro/student_data/jocelyn/Ledger_only.csv", fileEncoding = "UTF8")
ledgers %>% slice_head(n = 10) %>% mutate(lun = as.character(mdy(Date_Eng)),
gre = lunar_to_gregorian(lun)))
ledgers %>% slice_head(n = 10) %>% mutate(lun = as.character(mdy(Date_Eng),
gre = lunar_to_gregorian(lun)))
library(lubridate)
ledgers %>% slice_head(n = 10) %>% mutate(lun = as.character(mdy(Date_Eng),
gre = lunar_to_gregorian(lun)))
ledgers %>%
slice_head(n = 10) %>%
mutate(lun = as.character(mdy(Date_Eng)),
gre = lunar_to_gregorian(lun))
ledgers %>%
#slice_head(n = 10) %>%
mutate(lun = as.character(mdy(Date_Eng)),
gre = lunar_to_gregorian(lun))
ledgers %>%
#slice_head(n = 10) %>%
mutate(lun = as.character(mdy(Date_Eng)))
ll
lll <- c(ll, NA)
lunar_to_gregorian(lll)
load_all()
lunar_to_gregorian(lll)
yr <- str_split_fixed(lll, "-", 3)[,1]
yr
str_split_fixed(lunar_date, "-", 3)[,2]
str_split_fixed(lll, "-", 3)[,2]
lll
mo_l <- str_split_fixed(lunar_date, "-", 3)[,2]
mo_l <- str_split_fixed(lll, "-", 3)[,2]
mo_l
as.numeric(str_sub(mo_l, 1, 2))
load_all()
lunar_to_gregorian(lll)
load_all()
lunar_to_gregorian(lll)
str_ends("", "L")
str_ends(NA, "L")
t
tt <- bind_rows(t, NA)
tt <- bind_rows(t, c(yr = NA, mo = NA, leap_month_flag = NA))
tt
pmap_dbl(tt, fdom)
fdom <- function(yr, mo, dy, leap_month_flag){
print(yr)
print(mo)
## BEGIN MAKE CALENDAR
# extract the row for year and all months
calendar <- filter(conversion_table, year == yr)
months_only <- select(calendar, first_day_month1:first_day_month12)
# check if year has a leap month and if so, insert into the sequence
if (calendar$leap_month > 0) {
# insert leap month by extracting all months and sorting (by number of first days)
months_only <- calendar %>%
select(-c(year, leap_month, days_in_year)) %>%
sort()
# rename and insert leap month name
names(months_only) <- paste0("first_day_month", c(1:calendar$leap_month, paste0(calendar$leap_month,"L"), (calendar$leap_month+1):12))
# add other values back in
calendar <- bind_cols(year = calendar$year,
months_only,
leap_month = calendar$leap_month,
days_in_year = calendar$days_in_year)
}
# more error checks:
# how many days in a month for a particular year. e.g. is there a Feb 30th or not?
# (calculate days for last month: days in year + first day month1  - first day month12)
max_days <- c(diff(unlist(months_only)),
calendar$days_in_year + calendar$first_day_month1 - calendar$first_day_month12)
if(dy > max_days[mo]){
stop(paste(month.name[mo], yr, "has only", max_days[mo], "days in lunar calendar"))
}
# does the year in fact have the leap month as requested in the query?
m <- paste0("first_day_month", mo, "L")
if(leap_month_flag & !(m %in% names(months_only))){
stop(paste("no leap month", mo_l, "in", yr))
}
# extract the fist day of the month from lunar
first_day_of_month <-
calendar %>%
select(ends_with(paste0("month", mo))) %>%
as.numeric()
return(first_day_of_month)
}
pmap_dbl(tt, fdom)
fdom <- function(yr, mo, dy, leap_month_flag){
if (is.na(yr)) {return(NA)}
## BEGIN MAKE CALENDAR
# extract the row for year and all months
calendar <- filter(conversion_table, year == yr)
months_only <- select(calendar, first_day_month1:first_day_month12)
# check if year has a leap month and if so, insert into the sequence
if (calendar$leap_month > 0) {
# insert leap month by extracting all months and sorting (by number of first days)
months_only <- calendar %>%
select(-c(year, leap_month, days_in_year)) %>%
sort()
# rename and insert leap month name
names(months_only) <- paste0("first_day_month", c(1:calendar$leap_month, paste0(calendar$leap_month,"L"), (calendar$leap_month+1):12))
# add other values back in
calendar <- bind_cols(year = calendar$year,
months_only,
leap_month = calendar$leap_month,
days_in_year = calendar$days_in_year)
}
# more error checks:
# how many days in a month for a particular year. e.g. is there a Feb 30th or not?
# (calculate days for last month: days in year + first day month1  - first day month12)
max_days <- c(diff(unlist(months_only)),
calendar$days_in_year + calendar$first_day_month1 - calendar$first_day_month12)
if(dy > max_days[mo]){
stop(paste(month.name[mo], yr, "has only", max_days[mo], "days in lunar calendar"))
}
# does the year in fact have the leap month as requested in the query?
m <- paste0("first_day_month", mo, "L")
if(leap_month_flag & !(m %in% names(months_only))){
stop(paste("no leap month", mo_l, "in", yr))
}
# extract the fist day of the month from lunar
first_day_of_month <-
calendar %>%
select(ends_with(paste0("month", mo))) %>%
as.numeric()
return(first_day_of_month)
}
pmap_dbl(tt, fdom)
load_all()
lll
lunar_to_gregorian(lll)
lunar_to_gregorian(c(NA, lll))
